set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'
" AutoComplete plugin
Plugin 'Valloric/YouCompleteMe'
" file system explorer
Plugin 'scrooloose/nerdtree'
" rust lang
Plugin 'rust-lang/rust.vim'
" syntastic
Plugin 'vim-syntastic/syntastic'
" statusline
" Plugin 'powerline/powerline'
Plugin 'vim-airline/vim-airline'
Plugin 'vim-airline/vim-airline-themes'
"C++ Highlighting
Plugin 'octol/vim-cpp-enhanced-highlight'
" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
"Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
" Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
"Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Install L9 and avoid a Naming conflict if you've already installed a
" different version somewhere else.
" Plugin 'ascenator/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line
"

hi clear SignColumn

function! HasPaste()
    if &paste
        return 'PASTE MODE  '
    endif
    return ''
endfunction

"python with virtualenv support
py << EOF
import os
import sys
if 'VIRTUAL_ENV' in os.environ:
  project_base_dir = os.environ['VIRTUAL_ENV']
  activate_this = os.path.join(project_base_dir, 'bin/activate_this.py')
  execfile(activate_this, dict(__file__=activate_this))
EOF

set laststatus=2
set statusline=\ %{HasPaste()}%F%m%r%h\ %w\ \ CWD:\ %r%{getcwd()}%h\ \ \ Line:\ %l\ \ Column:\ %c

map <C-n> :NERDTreeToggle<CR>
map <C-h> :set hlsearch!<CR>

"nnoremap <C-Left> :tabprevious<CR>
"nnoremap <C-Right> :tabnext<CR>

nnoremap <C-l> :ls<CR>:b<space>

set hlsearch
set incsearch

set mouse=a

" regex by default
set magic
set smarttab

"------------Start Python PEP 8 stuff----------------
" Number of spaces that a pre-existing tab is equal to.
au BufRead,BufNewFile *.html,*py,*pyw,*.c,*.h,*.js,*.tex set tabstop=4

"spaces for indents
au BufRead,BufNewFile *.html,*.py,*.pyw,*.js,*.tex set shiftwidth=4
au BufRead,BufNewFile *.html,*.py,*.pyw,*.js,*.tex set expandtab
au BufRead,BufNewFile *.html,*.py,*.js,*.tex set softtabstop=4

" Use the below highlight group when displaying bad whitespace is desired.
highlight BadWhitespace ctermbg=red guibg=red

" Display tabs at the beginning of a line in Python mode as bad.
au BufRead,BufNewFile *.py,*.pyw match BadWhitespace /^\t\+/
" Make trailing whitespace be flagged as bad.
au BufRead,BufNewFile *.py,*.pyw,*.c,*.h match BadWhitespace /\s\+$/

" Wrap text after a certain number of characters
au BufRead,BufNewFile *.py,*.pyw, set textwidth=100

" Use UNIX (\n) line endings.
au BufNewFile *.py,*.pyw,*.c,*.h set fileformat=unix

" Set the default file encoding to UTF-8:
set encoding=utf-8

" Number of spaces that a pre-existing tab is equal to.
au BufRead,BufNewFile *.css set tabstop=2

"spaces for indents
au BufRead,BufNewFile *.css set shiftwidth=2
au BufRead,BufNewFile *.css set expandtab
au BufRead,BufNewFile *.css set softtabstop=2

au BufRead,BufNewFile *.tex set syntax=context
set ai "auto indent
set si "smart indent

set nu

highlight LineNr ctermfg=grey

let python_highlight_all=1
syntax on
highlight Pmenu ctermfg=cyan ctermbg=black

let g:ycm_python_binary_path = 'python'
let g:ycm_server_python_interpreter = '/usr/bin/python'
let g:ycm_autoclose_preview_window_after_completion=1
let g:ycm_collect_identifiers_from_comments_and_strings=1

set backspace=indent,eol,start

" Rust
let g:rustfmt_autosave = 1
"let g:ycm_rust_src_path = '~/.rustup/toolchains/stable-x86_64-unknown-linux-gnu/lib/rustlib/src/rust/src/'
"let g:racer_experimental_completer = 1
"let g:ycm_racerd_binary_path = '~/.cargo/bin/racer'
nnoremap <C-]> :YcmCompleter GoTo<CR>

" Syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*

nnoremap <C-e> :SyntasticReset<CR>
let g:syntastic_always_populate_loc_list = 1
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1
let g:syntastic_check_on_wq = 0

" airline
let g:airline_theme='deus'
let g:airline_powerline_fonts = 1
"let g:airline_symbols.space = "\ua0"
let g:airline_skip_empty_sections = 1
" let timeoutlen = 10

let g:airline#extensions#tabline#enabled = 1

